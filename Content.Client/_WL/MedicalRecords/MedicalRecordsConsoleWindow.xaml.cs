using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._WL.MedicalRecords;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._WL.MedicalRecords;

[GenerateTypedNameReferences]
public sealed partial class MedicalRecordsConsoleWindow : FancyWindow
{
    public Action<uint?>? OnKeySelected;
    public Action<StationRecordFilterType, string>? OnFiltersChanged;
    private uint? _selectedKey;

    public MedicalRecordsConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        foreach (var item in Enum.GetValues<StationRecordFilterType>())
        {
            FilterType.AddItem(GetTypeFilterLocals(item), (int)item);
        }

        RecordListing.OnItemSelected += args =>
        {
            if (RecordListing[args.ItemIndex].Metadata is not uint cast)
                return;

            OnKeySelected?.Invoke(cast);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            OnKeySelected?.Invoke(null);
        };

        FilterType.OnItemSelected += eventArgs =>
        {
            var type = (StationRecordFilterType)eventArgs.Id;
            FilterListingOfRecords(FilterText.Text);
        };

        FilterText.OnTextEntered += args =>
        {
            FilterListingOfRecords(args.Text);
        };
    }

    public void UpdateState(MedicalRecordsConsoleState state)
    {
        if (state.Filter != null && state.Filter.Value != FilterText.Text)
        {
            FilterText.Text = state.Filter.Value;
        }

        _selectedKey = state.SelectedKey;
        FilterType.SelectId((int)(state.Filter?.Type ?? StationRecordFilterType.Name));
        NoRecords.Visible = state.RecordListing == null || state.RecordListing.Count == 0;
        PopulateRecordListing(state.RecordListing);

        var selected = _selectedKey != null;
        PersonContainer.Visible = selected;
        RecordUnselected.Visible = !selected;

        if (state.StationRecord != null)
        {
            PopulateRecordContainer(state.StationRecord);
        }
    }

    private void PopulateRecordListing(Dictionary<uint, string>? listing)
    {
        if (listing == null)
        {
            RecordListing.Clear();
            return;
        }

        var entries = listing.Select(i => new ItemList.Item(RecordListing)
        {
            Text = i.Value,
            Metadata = i.Key
        }).ToList();

        entries.Sort((a, b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal));
        RecordListing.SetItems(entries, (a, b) => string.Compare(a.Text, b.Text));
    }

    private void PopulateRecordContainer(GeneralStationRecord stationRecord)
    {
        var na = Loc.GetString("generic-not-available-shorthand");
        PersonName.Text = stationRecord.Name;
        PersonJob.Text = stationRecord.JobTitle ?? na;
        PersonPrints.Text = stationRecord.Fingerprint ?? na;
        PersonDna.Text = stationRecord.DNA ?? na;

        MedicalRecordText.SetMessage(FormattedMessage.FromMarkupOrThrow(
            stationRecord.MedicalRecord ?? Loc.GetString("medical-records-console-no-record")));
    }

    private void FilterListingOfRecords(string text = "")
    {
        OnFiltersChanged?.Invoke((StationRecordFilterType)FilterType.SelectedId, text);
    }

    private string GetTypeFilterLocals(StationRecordFilterType type)
    {
        return Loc.GetString($"medical-records-{type.ToString().ToLower()}-filter");
    }
}
